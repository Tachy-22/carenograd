AI SDK 5 is available now.
View Announcement
Introduction

Setup
Usage
Troubleshooting
Examples

Chatbot
v0 clone
Components

Actions
Branch
Code Block
Conversation
Image
Inline Citation
Loader
Message
Prompt Input
Reasoning
Response
Sources
Suggestion
Task
Tool
Web Preview
Components
Conversation
Conversation

The Conversation component wraps messages and automatically scrolls to the bottom. Also includes a scroll button that appears when not at the bottom.

Hello, how are you?

I'm good, thank you! How can I assist you today?

I'm looking for information about your services.

Sure! We offer a variety of AI solutions. What are you interested in?

I'm interested in natural language processing tools.

Great choice! We have several NLP APIs. Would you like a demo?

Yes, a demo would be helpful.

Alright, I can show you a sentiment analysis example. Ready?

Installation

ai-elements
shadcn
Manual
npx ai-elements@latest add conversation
Usage


import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from '@/components/ai-elements/conversation';

<Conversation className="relative w-full" style={{ height: '500px' }}>
  <ConversationContent>
    <Message from={'user'}>
      <MessageContent>Hi there!</MessageContent>
    </Message>
  </ConversationContent>
  <ConversationScrollButton />
</Conversation>
Usage with AI SDK

Build a simple conversational UI with Conversation and PromptInput:

Add the following component to your frontend:

app/page.tsx

'use client';

import {
  Conversation,
  ConversationContent,
  ConversationScrollButton,
} from '@/components/ai-elements/conversation';
import { Message, MessageContent } from '@/components/ai-elements/message';
import {
  Input,
  PromptInputTextarea,
  PromptInputSubmit,
} from '@/components/ai-elements/prompt-input';
import { useState } from 'react';
import { useChat } from '@ai-sdk/react';
import { Response } from '@/components/ai-elements/response';

const ConversationDemo = () => {
  const [input, setInput] = useState('');
  const { messages, sendMessage, status } = useChat();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      sendMessage({ text: input });
      setInput('');
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 relative size-full rounded-lg border h-[600px]">
      <div className="flex flex-col h-full">
        <Conversation>
          <ConversationContent>
            {messages.map((message) => (
              <Message from={message.role} key={message.id}>
                <MessageContent>
                  {message.parts.map((part, i) => {
                    switch (part.type) {
                      case 'text': // we don't use any reasoning or tool calls in this example
                        return (
                          <Response key={`${message.id}-${i}`}>
                            {part.text}
                          </Response>
                        );
                      default:
                        return null;
                    }
                  })}
                </MessageContent>
              </Message>
            ))}
          </ConversationContent>
          <ConversationScrollButton />
        </Conversation>

        <Input
          onSubmit={handleSubmit}
          className="mt-4 w-full max-w-2xl mx-auto relative"
        >
          <PromptInputTextarea
            value={input}
            placeholder="Say something..."
            onChange={(e) => setInput(e.currentTarget.value)}
            className="pr-12"
          />
          <PromptInputSubmit
            status={status === 'streaming' ? 'streaming' : 'ready'}
            disabled={!input.trim()}
            className="absolute bottom-1 right-1"
          />
        </Input>
      </div>
    </div>
  );
};

export default ConversationDemo;
Add the following route to your backend:

api/chat/route.ts

import { streamText, UIMessage, convertToModelMessages } from 'ai';

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages }: { messages: UIMessage[] } = await req.json();

  const result = streamText({
    model: 'openai/gpt-4o',
    messages: convertToModelMessages(messages),
  });

  return result.toUIMessageStreamResponse();
}
Features

Automatic scrolling to the bottom when new messages are added
Smooth scrolling behavior with configurable animation
Scroll button that appears when not at the bottom
Responsive design with customizable padding and spacing
Flexible content layout with consistent message spacing
Accessible with proper ARIA roles for screen readers
Customizable styling through className prop
Support for any number of child message components
Props

<Conversation />

contextRef:
React.Ref<StickToBottomContext>
Optional ref to access the StickToBottom context object.
instance:
StickToBottomInstance
Optional instance for controlling the StickToBottom component.
children:
((context: StickToBottomContext) => ReactNode) | ReactNode
Render prop or ReactNode for custom rendering with context.
[...props]:
Omit<React.HTMLAttributes<HTMLDivElement>, "children">
Any other props are spread to the root div.
<ConversationContent />

children:
((context: StickToBottomContext) => ReactNode) | ReactNode
Render prop or ReactNode for custom rendering with context.
[...props]:
Omit<React.HTMLAttributes<HTMLDivElement>, "children">
Any other props are spread to the root div.
<ConversationScrollButton />

[...props]:
ComponentProps<typeof Button>
Any other props are spread to the underlying shadcn/ui Button component.
Previous
Code Block
Next
Image
On this page
Conversation
Installation
Usage
Usage with AI SDK
Features
Props
<Conversation />
<ConversationContent />
<ConversationScrollButton />
Elevate your AI applications with Vercel.
Trusted by OpenAI, Replicate, Suno, Pinecone, and more.
Vercel provides tools and infrastructure to deploy AI apps and features at scale.
Resources
Docs
Cookbook
Providers
Showcase
GitHub
Discussions
More
Playground
Contact Sales
About Vercel
Next.js + Vercel
Open Source Software
GitHub
X
Legal
Privacy Policy
Â© 2025 Vercel, Inc.